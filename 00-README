
Overview:
=========

The goal of this layer is to create a yocto build which can be deployed
on a modern server to provide a useable environment which in turn can
build yocto (and indeed the variant from this layer itself).  A lot of
the heavy lifting to achieve this has been done by the build-appliance
image type of yocto, but that is limited to virtual deployment, and does
not have all the development tools and/or man pages and things like tab
completion that make a system "useable".  This layer attempts to close
that gap.

Requirements:
=============

To provide an actual BSP, for i7 we need:
	git://git.pokylinux.org/meta-intel

To provide critical system components, such as vim, we need:
	git://git.openembedded.org/meta-openembedded


Getting Started:
================

There is a sample configuration file in conf/local.conf.sample that you
can use as the basis of your build/local.conf -- check the settings
in there to see if things like timezone and number of jobs are
appropriate for your location/system.  Once that is done, you can
kick off a build on a supported build host with:
	bitbake yocto-builder

Deployment:
===========

Once the build is complete, you will have two files of interest in
the normal tmp/deploy/images dir:

	intel-corei7-64/yocto-builder-intel-corei7-64.tar.bz2
	intel-corei7-64/yocto-builder-initramfs-intel-corei7-64.cpio.gz

For a simple, single disk deployment, the initramfs is optional.  However
on a multi-disk deployment, where RAID0 is desired to get twice the I/O
bandwidth, we will need the initramfs in order to configure /dev/md0.

The System Rescue CD project:  http://www.sysresccd.org/SystemRescueCd_Homepage
provides a handy image that is useful in order to bootstrap a new computer
that doesn't yet have any OS installed.  The discussion below will assume that
is being used, and that a basic familiarity with installing linux such as
running fdisk and tar etc are known.

After booting the USB rescue image, set a root password so you can scp the
two files above across to the machine they are being deployed on.  You may
wish to ssh in as root as well, to facilitate cut-and-paste of steps from
this file as you go.

Use fdisk to create your desired partition layout.  For a two disk system,
and RAID0, the following recommendation might be useful:

sda:
	sda1: 256MB for /boot  -- type 83  *active*
	sda2: 768M for swap -- type 82
	sda3: remainder for RAID0 -- type fd

sdb:
	sdb1: 1G for swap -- type 82
	sdb2: remainder for RAID0 -- type fd

Note that in the above, the sda3 and sdb2 should be of the same final size
so that RAID0 can effectively use the space.

Again, if using RAID0, then configure /dev/md0 to use the above partitions:
	mdadm --create /dev/md0 -n2 -l0 /dev/sda3 /dev/sdb2

Check what the default stride is for the new md0 device (typically 512k)
	mdadm --detail /dev/md0

Create an ext4 filesystem on the new device with matching stride:
	mkfs.ext4 -v -E stride=128 /dev/md0
(noting that 4k blocks * 128 = 512).

Mount the device -- do not use /mnt as system rescue already uses it!
	mkdir /z
	mount -v /dev/md0 /z

Format the boot partition:
	mkfs.ext4 /dev/sda1

Format the swap partitions:
	mkswap /dev/sda2
	mkswap /dev/sdb1

Mount the boot partition:
	cd /z
	mkdir boot
	mount -v /dev/sda1 boot

Copy the initramfs into boot:
	cp ~/yocto-builder-initramfs-intel-corei7-64.cpio.gz boot/initramfs-3.14.4-yocto-standard.img

Unbundle the rootfs image:
	cd /z
	tar --numeric-owner -xpf ~/yocto-builder-intel-corei7-64.tar.bz2

Chroot into the rootfs to do some remaining post installation configuration
	cd /z
	chroot . /bin/bash

Make device nodes appear so that programs will function normally:
	mount -t devtmpfs /dev /dev

Set root password:
	passwd

Edit /etc/fstab and add entries for /boot on sda1 and / on md0 and swap:
   /dev/md0		/               ext4    noatime,errors=remount-ro 0       1
   /dev/sda1		/boot           ext4    noatime,errors=remount-ro 0       0
   /dev/sda2		none            swap    sw              0       0
   /dev/sdb1		none            swap    sw              0       0

Edit /etc/mdadm/mdadm.conf to reflect the raid settings:
	ARRAY /dev/md0 devices=/dev/sda3,/dev/sdb2

Unpack the initramfs and copy the updated mdadm.conf into it and rebundle:
   mv /boot/initramfs-3.14.4-yocto-standard.img  /boot/initramfs-3.14.4-yocto-st
   cd /tmp
   rm -rf x ; mkdir x ; cd x
   zcat /boot/initramfs-3.14.4-yocto-standard.img~ | cpio -id -H newc
   cp -a /etc/mdadm/mdadm.conf ./etc/mdadm/mdadm.conf
   find . | cpio -o -H newc |gzip -9 > /boot/initramfs-3.14.4-yocto-standard.img

If additional kernel modules are desired to be loaded early, then edit the file
/sbin/init in the initramfs content above before rebundling with cpio.

Configure/install grub:
	mkdir -p /boot/grub
	grub-mkconfig > /boot/grub/grub.cfg
	grub-install /dev/sda1

Unmount /dev
	umount -v /dev

Leave the chroot:
	exit

Unmount boot
	umount -v /z/boot

Unmount /dev/md0
	umount -v /z

Reboot into your new system.
