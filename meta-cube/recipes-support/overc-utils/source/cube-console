#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

usage()
{
cat << EOF

  cube-console <console name>

  example:
    
      $ cube-console cube-essential
      $ cube-console dom0
 
EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	--ns) namespace=t
            ;;
        *) break
            ;;
    esac
    shift
done

function wait_for_files()
{
    local wait_count=${1:-200} # 200 is the default
    shift
    local files=$@ # files to wait for
    local wait_increment=1 # second sleeps

    while [ ${wait_count} -gt 0 ]; do
	for f in ${files}; do
	    ls -alF ${f} > /dev/null 2>&1
	    if [ -e "${f}" ]; then
		echo "${f}"
		return 0
	    fi
	done
	sleep ${wait_increment}
	wait_count=$((wait_count - 1))
    done

    return 1
}

# essential is only available from dom0, so we need extra checks
function do_essential_console()
{
    if [ ! -d "/host/proc" ]; then
	echo "ERROR: essential console can only be entered via dom0"
	exit 1
    fi

    if [ ! -d "/essential" ]; then
	echo "ERROR: essential filesystem is not available on /essential"
	exit 1
    fi

    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console to essential"
	exit 1
    fi

    echo "console essential" > /opt/container/local/cmd-pipe

    file=`wait_for_files 10 /opt/container/local/cmd-output /opt/container/local/cmd-error`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi
    if [ "${file}" = "/opt/container/local/cmd-error" ]; then
	socat -,raw,echo=0 ${file}
	exit 1
    fi
    if [ "${file}" = "/opt/container/local/cmd-output" ]; then
	console_device=`cat ${file} | sed 's/\r//g'`
    fi

    file=`wait_for_files 10 /opt/container/local/${console_device}`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi
    socat -,raw,echo=0 ${file}
}


function do_console()
{
    local target=$1
    local type=$2 # namspace or login

    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console"
	exit 1
    fi

    # In the future, we can create more .. but for now, let's just allow one
    if [ -e "/opt/container/local/console-${target}" ]; then
	echo "[INFO]: the console to ${target} is already active, only one connection is allowed"
	exit 1
    fi

    if [ -z "${type}" ]; then
	type=login
    fi

    if [ "${type}" = "namespace" ]; then
	echo "nsenter ${target}" > /opt/container/local/cmd-pipe
    else
	echo "console ${target}" > /opt/container/local/cmd-pipe
    fi

    file=`wait_for_files 10 /opt/container/local/cmd-output /opt/container/local/cmd-error`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi
    if [ "${file}" = "/opt/container/local/cmd-error" ]; then
	socat -,raw,echo=0 ${file}
	exit 1
    fi
    if [ "${file}" = "/opt/container/local/cmd-output" ]; then
	console_device=`cat ${file} | sed 's/\r//g'`
    fi

    file=`wait_for_files 10 /opt/container/local/${console_device}`
    if [ -z "${file}" ]; then
	echo "[ERROR]: No console is available, and no error reported"
	exit 2
    fi
    socat -,raw,echo=0 ${file}
}

# Parms: $1: target container/console
function enter_console
{
    local consolename=$1

    case $consolename in
	*essential*)
	    do_essential_console
	    ;;
	*dom0*)
	    do_console dom0 login
	    ;;
	*)
	    # only works if you are on dom0, since these are unauthenticated consoles
	    do_console ${consolename} namespace
	    ;;
    esac
}

enter_console $1
