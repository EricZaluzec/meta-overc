#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

usage()
{
cat << EOF

  cube-console [--ns] <console name>

    --ns: connect via namespaces (versus pipes). 
          Not supported for all console targets (currently only essential)

  example:
    
      $ cube-console cube-essential
      $ cube-console dom0
 
EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	--ns) namespace=t
            ;;
        *) break
            ;;
    esac
    shift
done


# essential is only available from dom0, so we need to check that first, and then deal with the specific
# mounts and information that make it work
function do_essential_console_via_namespace()
{
    if [ ! -d "/host/proc" ]; then
	echo "ERROR: essential console can only be entered via dom0"
	exit 1
    fi

    if [ ! -d "/essential" ]; then
	echo "ERROR: essential filesystem is not available on /essential"
	exit 1
    fi

    nsenter --mount --ipc --uts --net --target /host/proc/1 -- /bin/bash
}

# essential is only available from dom0, so we need extra checks
function do_essential_console()
{
    if [ ! -d "/host/proc" ]; then
	echo "ERROR: essential console can only be entered via dom0"
	exit 1
    fi

    if [ ! -d "/essential" ]; then
	echo "ERROR: essential filesystem is not available on /essential"
	exit 1
    fi

    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console to essential"
	exit 1
    fi

    # In the future, we can create more .. but for now, let's just allow one
    console_pipe=`ls /opt/container/local/console-cube* 2> /dev/null`
    if [ -n "${console_pipe}" ]; then
    	echo "[INFO]: the essential console is already active, only one connection is allowed"
    	exit 1
    fi

    echo "console" > /opt/container/local/cmd-pipe

    for i in `seq 0 9`; do
	console_pipe=`ls /opt/container/local/console-cube* 2> /dev/null`
	if [ -z "${console_pipe}" ]; then
	    sleep 1
	fi
    done

    if [ -z "${console_pipe}" ]; then
	echo "[ERROR]: /opt/container/local/console-cube was not created, cannot connect to essential"
	exit 1
    fi

    socat -,raw,echo=0 ${console_pipe}
}

function do_dom0_console()
{
    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console to dom0"
	exit 1
    fi

    # In the future, we can create more .. but for now, let's just allow one
    if [ -e "/opt/container/local/console-dom0" ]; then
	echo "[INFO]: the dom0 console is already active, only one connection is allowed"
	exit 1
    fi

    echo "console" > /opt/container/local/cmd-pipe

    for i in `seq 0 9`; do
	if [ ! -e "/opt/container/local/console-dom0" ]; then
	    sleep 1
	fi
    done

    if [ ! -e "/opt/container/local/console-dom0" ]; then
	echo "[ERROR]: /opt/container/local/console-dom0 was not created, cannot connect to dom0"
	exit 1
    fi

    socat -,raw,echo=0 /opt/container/local/console-dom0
}

function do_dom0_console()
{
    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console to dom0"
	exit 1
    fi

    # In the future, we can create more .. but for now, let's just allow one
    if [ -e "/opt/container/local/console-dom0" ]; then
	echo "[INFO]: the dom0 console is already active, only one connection is allowed"
	exit 1
    fi

    echo "console" > /opt/container/local/cmd-pipe

    for i in `seq 0 9`; do
	if [ ! -e "/opt/container/local/console-dom0" ]; then
	    sleep 1
	fi
    done

    if [ ! -e "/opt/container/local/console-dom0" ]; then
	echo "[ERROR]: /opt/container/local/console-dom0 was not created, cannot connect to dom0"
	exit 1
    fi

    socat -,raw,echo=0 /opt/container/local/console-dom0
}

# Note: this can be unified with the dom0 console.
function do_namespace_console()
{
    local target=$1

    if [ ! -e "/opt/container/local/cmd-pipe" ]; then
	echo "[ERROR]: /opt/container/local/cmd-pipe not found, cannot create console"
	exit 1
    fi

    # In the future, we can create more .. but for now, let's just allow one
    if [ -e "/opt/container/local/namespace-${target}" ]; then
	echo "[INFO]: the namespace is already active, only one connection is allowed"
	exit 1
    fi

    echo "nsenter ${target}" > /opt/container/local/cmd-pipe

    for i in `seq 0 9`; do
	if [ ! -e "/opt/container/local/namespace-${target}" ]; then
	    sleep 1
	fi
    done

    if [ ! -e "/opt/container/local/namespace-${target}" ]; then
	echo "[ERROR]: /opt/container/local/namespace-${target} was not created, cannot connect to namespace"
	exit 1
    fi

    socat -,raw,echo=0 /opt/container/local/namespace-${target}
}

# Parms: $1 = filename
function enter_console
{
    local consolename=$1

    case $consolename in
	*essential*)
	    if [ -n "${namespace}" ]; then
		do_essential_console_via_namespace
	    else
		do_essential_console
	    fi
	    ;;
	*dom0*)
	    do_dom0_console
	    ;;
	*)
	    # only works if you are on dom0, since these are unauthenticated
	    # consoles
	    do_namespace_console ${consolename}
	    ;;
    esac
}

enter_console $1
