From: Jason Wessel <jason.wessel@windriver.com>
Date: Thu, 11 Aug 2016 13:07:27 -0500
Subject: [PATCH] lxc-start,config: Add lxc.uncontain to access CAP_ADMIN_NS

Allow for a container to be a "super" administration container with
the possibility to access the root level name space via setns() with
use of the CLONE_PARENT in the flags variable.

This patch allows the container manager to be responsible for setting
up the kernel capability bits and name space instantiation.  It is the
responsibility of the tools inside this special privileged container
to make proper use of setns() and the CLONE_PARENT flag.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 doc/lxc.container.conf.sgml.in | 15 +++++++++++++++
 src/lxc/conf.h                 |  5 +++++
 src/lxc/confile.c              | 17 +++++++++++++++++
 src/lxc/namespace.h            |  3 +++
 src/lxc/start.c                |  3 +++
 5 files changed, 43 insertions(+)

diff --git a/doc/lxc.container.conf.sgml.in b/doc/lxc.container.conf.sgml.in
index 05baddd..62039db 100644
--- a/doc/lxc.container.conf.sgml.in
+++ b/doc/lxc.container.conf.sgml.in
@@ -1180,6 +1180,21 @@ proc proc proc nodev,noexec,nosuid 0 0
             </para>
           </listitem>
         </varlistentry>
+        <varlistentry>
+          <term>
+            <option>lxc.uncontain</option>
+          </term>
+          <listitem>
+            <para>
+              Specify that this container will receive the
+              CAP_ADMIN_NS right if the host kernel supports it.  The
+              CAP_ADMIN_NS will allow the setns() call to escape back
+              to the root level PID name space if the instantiated
+              container is a direct child from the root level PID name
+              space.
+            </para>
+          </listitem>
+        </varlistentry>
       </variablelist>
     </refsect2>
 
diff --git a/src/lxc/conf.h b/src/lxc/conf.h
index 2593ce5..43a7276 100644
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -332,6 +332,11 @@ struct lxc_conf {
 	int kmsg;  // if 1, create /dev/kmsg symlink
 	char *rcfile;	// Copy of the top level rcfile we read
 
+	// This admin container gets CAP_ADMIN_NS for the purpose
+	// of later allowing an escape via setns() to the root
+	// name space
+	int uncontain;
+
 	// Logfile and logleve can be set in a container config file.
 	// Those function as defaults.  The defaults can be overriden
 	// by command line.  However we don't want the command line
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index 7f34164..70b5b72 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -95,6 +95,7 @@ static int config_network_ipv6(const char *, const char *, struct lxc_conf *);
 static int config_network_ipv6_gateway(const char *, const char *, struct lxc_conf *);
 static int config_cap_drop(const char *, const char *, struct lxc_conf *);
 static int config_cap_keep(const char *, const char *, struct lxc_conf *);
+static int config_uncontain(const char *, const char *, struct lxc_conf *);
 static int config_console(const char *, const char *, struct lxc_conf *);
 static int config_console_logfile(const char *, const char *, struct lxc_conf *);
 static int config_seccomp(const char *, const char *, struct lxc_conf *);
@@ -166,6 +167,7 @@ static struct lxc_config_t config[] = {
 	{ "lxc.network",              config_network              },
 	{ "lxc.cap.drop",             config_cap_drop             },
 	{ "lxc.cap.keep",             config_cap_keep             },
+	{ "lxc.uncontain",            config_uncontain            },
 	{ "lxc.console.logfile",      config_console_logfile      },
 	{ "lxc.console",              config_console              },
 	{ "lxc.seccomp",              config_seccomp              },
@@ -2269,6 +2271,21 @@ static int lxc_get_item_cap_keep(struct lxc_conf *c, char *retv, int inlen)
 	return fulllen;
 }
 
+static int config_uncontain(const char *key, const char *value,
+			    struct lxc_conf *lxc_conf)
+{
+	int v = atoi(value);
+
+	if (v != 0 && v != 1) {
+		ERROR("Wrong value for lxc.uncontain. Can only be set to 0 or 1");
+		return -1;
+	} else {
+		lxc_conf->uncontain = v;
+	}
+
+	return 0;
+}
+
 static int lxc_get_mount_entries(struct lxc_conf *c, char *retv, int inlen)
 {
 	int len, fulllen = 0;
diff --git a/src/lxc/namespace.h b/src/lxc/namespace.h
index 027c765..f543c07 100644
--- a/src/lxc/namespace.h
+++ b/src/lxc/namespace.h
@@ -31,6 +31,9 @@
 #ifndef CLONE_FS
 #  define CLONE_FS                0x00000200
 #endif
+#ifndef CLONE_UNCONTAIN
+#  define CLONE_UNCONTAIN         0x00001000
+#endif
 #ifndef CLONE_NEWNS
 #  define CLONE_NEWNS             0x00020000
 #endif
diff --git a/src/lxc/start.c b/src/lxc/start.c
index 5be0077..481336a 100644
--- a/src/lxc/start.c
+++ b/src/lxc/start.c
@@ -995,6 +995,9 @@ void resolve_clone_flags(struct lxc_handler *handler)
 {
 	handler->clone_flags = CLONE_NEWPID | CLONE_NEWNS;
 
+	if (handler->conf->uncontain)
+		handler->clone_flags |= CLONE_UNCONTAIN;
+
 	if (!lxc_list_empty(&handler->conf->id_map)) {
 		INFO("Cloning a new user namespace");
 		handler->clone_flags |= CLONE_NEWUSER;
-- 
1.9.1

