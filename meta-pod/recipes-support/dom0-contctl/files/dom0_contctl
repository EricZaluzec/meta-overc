#! /bin/bash


function usage {
    cat << EOF

Usage: ${0##*/} <cmd> [option]...

Common options for all <cmd>:

   -t <container type>       : type of container including: lxc, lxd, docker.
                               Default is lxc.
   -a <host proc path>       : absolute path to bind mount to host proc, default
                               /host/proc.

${0##*/} launch-peer [option]...

    start a peer container

   -n <container name>: Name of container to be launched

${0##*/} launch-nested [option]...

    start a nested container

   -n <container name>       : Name of container to be launched
   -p <parent container name>: Name of parent container

${0##*/} enter-ns [option]...

    enter-ns: enter namespaces of container

   -n <container name>       : Name of container to be launched

${0##*/} stop [option]...

    stop an active container

   -n <container name>       : Name of container to be launched

${0##*/} list [option]...

    list all containers and their state

${0##*/} exec-cmd [option]... -- <shell command with options>

    invoke a shell cmd against a container

   -n <container name>       : Name of container to be launched

${0##*/} setup-net [option]...

    setup networks defined by <config file>

   -n <container name>       : Name of container to be launched
   -c <config file>          : Absolute path to a config file

${0##*/} remote-net [option]...

    remove networks defined by <config file>

   -n <container name>       : Name of container to be launched
   -c <config file>          : Absolute path to a config file
EOF
}


# Global variables
# What container type we support
main_config_file="/etc/dom0-contctl.conf"
container_type="lxc"
host_proc_path="/host/proc"

HOST_CN_NAME="host"

cmd=${1}
container_name=""
parent_container_name=""
cfg_file=""


OPTIND=2
while getopts "h?n:t:p:a:c:g:" opt; do
    case "$opt" in
    n)
        container_name=$OPTARG
        ;;
    t)
        container_type=$OPTARG
        ;;
    a)
        host_proc_path=$OPTARG
        ;;
    p)
        parent_container_name=$OPTARG
        ;;
    g)
        start_group=$OPTARG
        ;;
    c)
        cfg_file=$OPTARG
        ;;
    *)
        usage
        exit 0
        ;;
    esac
done
shift $((OPTIND-1))

# Now load correct backend driver
case "${container_type}" in
    lxc)
        source $(dirname ${0})/lxc_driver.sh
        ;;
    *)
        echo "Error, backend driver ${container_type} is not supported."
        exit 1
        ;;
esac

if [ -n "${start_group}" ]; then
    echo "Start group (${start_group}) passed, building container start list"
    start_containers=`get_matching_container_group ${start_group}`
fi

case "${cmd}" in
    launch-peer)
        if [ -z "${start_containers}" ]; then
            start_containers=${container_name}
        fi

        [ -z "${start_containers}" ] && echo "Error, please provide container name" && exit 1

        for c in ${start_containers}; do
            echo "Launching ${c} as peer"
            launch_peer_container ${c}
        done
        ;;
    launch-nested)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${parent_container_name}" ] && \
                echo "Error, please provide parent container name" && exit 1
        launch_nested_container ${container_name} ${parent_container_name}
        ;;
    enter-ns)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        enter_container_ns ${container_name}
        ;;
    stop)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        stop_container ${container_name}
        ;;
    list)
        list_containers
        ;;
    setup-net)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${cfg_file}" ] && echo "Error, please provide net config file" && exit 1
        setup_net ${container_name} ${cfg_file}
        ;;
    remove-net)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        [ -z "${cfg_file}" ] && echo "Error, please provide net config file" && exit 1
        remove_net ${container_name} ${cfg_file}
        ;;
    exec-cmd)
        [ -z "${container_name}" ] && echo "Error, please provide container name" && exit 1
        exec_cmd_container ${container_name} $@
        ;;
    *)
        usage
        ;;
esac
