#!/bin/bash

container_dir=/var/lib/lxc
container_image=/root/pod-builder-genericx86-64.tar.bz2
upstream_url=http://openlinux.windriver.com/overc/images/genericx86-64/pod-builder-genericx86-64.tar.bz2

usage() {
	cat <<EOT;
Usage: $0 [OPTION] ...

  -A <container name>    container status
                         0: does not exist
                         2: exists, not active
                         3: exists, active

  -a <container name>    activate container
  -R <container name> <snapshot>
                         rollback container with snapshot
  -L                     list containers
  -B <container name>    list container snapshots
  -s <container url>     update container image with url
  -U                     update container image      
  -S <container name>    start container
  -K <container name>    stop container
EOT
}

container_status() {
	local container=$1
	local container_exists
	local container_active

	container_exists=0
	container_active=0

	while read c;do
	    if [ "$c" = "$container" ]; then
		container_exists=1
	    fi
	done < <(lxc-ls)

	while read c;do
	    if [ "$c" = "$container" ]; then
		container_active=1
	    fi
	done < <(lxc-ls --active)

	if [ $container_active -eq 1 ]; then
		retval=3
	elif [ $container_exists -eq 1 ]; then
		retval=2
	else
		retval=0
	fi
	return $retval
}

populate_rootfs() {
	local container=$1

	if [ ! -e $container_dir/$container/rootfs ]; then
		echo "Invalid container! $container_dir/$container/rootfs does not exist"
		return 1
	fi

	echo "Extracting container image $container_image..."
	cd $container_dir/$container/rootfs
	tar jxf $container_image
	if [ $? -ne 0 ]; then
		return 1
	fi
	return 0
}

activate() {
	local container=$1
	local dir=$container_dir/$1
	local template="wrlinux"
	local status
	local snapshot
	local rollback_needed
	
        # 0: does not exist
        # 1: exists, not active
        # 2: exists, active
	container_status $container
	status=$?
	
	if [ $status -eq 2 ]; then
		echo "Error! Container is active"
		exit 1	
	elif [ $status -eq 0 ]; then
		/usr/bin/lxc-create -B best -n $container -t $template
		if [ $? -ne 0 ]; then
			echo "Error! lxc-create fail"
			exit 1
		else
			echo "Container $container created ok"
		fi
		populate_rootfs $container
		if [ $? -ne 0 ]; then
			/usr/bin/lxc-destroy -n $container
			exit 1
		fi
		start_container $container
		if [ $? -ne 0 ]; then
			exit 1
		fi
	else
		# container exist, not active
		/usr/bin/lxc-snapshot -n $container
		if [ $? -ne 0 ]; then
			echo "Error! Cannot create a snapshot of container $container"
			exit 1
		else
			echo "Successfully backed up container $container"
		fi
	
		if [ -d $dir ]; then
			echo "Cleaning up $dir..."
			rm -rf $dir/rootfs/*
		else
			echo "Error! Directory $dir is missing!"
			exit 1
		fi

		rollback_needed=1
		populate_rootfs $container
		if [ $? -eq 0 ]; then
			start_container $container
			if [ $? -eq 0 ]; then
				rollback_needed=0
			fi
		fi
		if [ $rollback_needed -eq 1 ]; then
			echo "Rollback needed"
			snapshot=`lxc-snapshot -L -n $container|tail -1|awk '{print $1}'`		
			if [ -z "$snapshot" -o "$snapshot" = "No" ]; then
				echo "Error! Cannot find snapshot to restore to"
				exit 1
			fi
			echo "Restoring former container to snapshot $snapshot"
			/usr/bin/lxc-snapshot -n $container -r $snapshot
			if [ $? -eq 0 ]; then
				echo "Restored ok"
				exit 0
			else
				echo "Error! $container container failed to restore to $snapshot"
				exit 1
			fi
		fi
	fi
	exit 0
}

pull_image() {
	local url=$1
	local tmp=`mktemp -d `

	wget -P $tmp $url
	if [ $? -eq 0 ]; then
		# test what we downloaded
		items=0
		for i in $tmp/*;do 
			if [ -f $i ]; then
				items=$(expr $items + 1)
				new_image=$i
			fi
		done
		if [ $items -ne 1 ]; then
			echo "Error! Upstream $url downloaded an unexpected number of files [$items]"
			exit 1
		fi
		if [ -f $container_image ]; then
			stamp=$(date +%Y%m%d_$H%M%S)
			mv $container_image $container_image.$stamp
			if [ $? -ne 0 ]; then
				exit 1
			fi
		fi
		mv $new_image $container_image
		if [ $? -ne 0 ]; then
			exit 1
		fi
		rmdir $tmp
	else
		rm -rf $tmp
		exit 1
	fi
}

start_container() {
	local container=$1

	lxc-start -d -n $container

	# monitor the output of lxc-ls
	max_wait=5
	while [ $max_wait -ge 0 ]; do
		while read i; do
			if [ "$i" = "$container" ]; then
				echo "Container $container started ok"
				return 0
			fi
		done < <(lxc-ls --active)
		sleep 1
		max_wait=$(expr $max_wait - 1)
	done
	# failed to start
	echo "Error! $container failed to start"
	return 1
}

stop_container() {
	local container=$1

	lxc-stop -k -n $container
}

list_snapshots() {
	local container=$1

	/usr/bin/lxc-snapshot -L -n $container
}

list_container() {
	/usr/bin/lxc-ls
}

rollback_container() {
	local container=$1
	local snapshot=$2

        # 0: does not exist
        # 1: exists, not active
        # 2: exists, active
	container_status $container
	status=$?
	if [ $status -eq 0 ]; then
		echo "Container $container does not exist"
		exit 1
	fi

	/usr/bin/lxc-snapshot -n $container -r $snapshot
	if [ $? -ne 0 ]; then
		echo "lxc-snapshot failed"
		exit 1
	fi
	return 0
}

retval=0
while getopts :a:s:US:K:LB:R:A: opt
do
	case $opt in
	A)
		container=$OPTARG	
		container_status $container
		retval=$?
		;;
	a)
		container=$OPTARG	
		echo "Activate container: $container"
		activate $container
		;;
	s)
		container_url=$OPTARG	
		echo "Update container image with $container_url"
		pull_image $container_url
		;;
	U)
		echo "Pull on container image"
		pull_image $upstream_url
		;;
	S)
		container=$OPTARG	
		echo "Start container $container"
		start_container $container
		retval=$?
		;;
	K)
		container=$OPTARG	
		echo "Stop container $container"
		stop_container $container
		;;
	L)
		echo "List containers"
		list_container
		;;
	B)
		container=$OPTARG	
		echo "List snapshots on container: $container"
		list_snapshots $container
		;;
	R)
		container=$OPTARG	
		shift
		shift
		snapshot=$1
		if [ -z $snapshot ]; then
			usage
			exit 1
		fi
		echo "Rollback snapshots on container $container to $snapshot"
		rollback_container $container $snapshot
		retval=$?
		;;
	*)
		usage
		exit 1
		;;
	esac
done
exit $retval
